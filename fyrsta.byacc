%{
 import java.io.*;
 import java.util.Vector;
 import java.util.HashMap;   
%}


%token IF, ELSE, ELSEIF, VAR, WHILE, OPNAME, RETURN, ERROR
%token <sval> LITERAL, NAME, OPNAME
%type <ival> parlistm, parlist, declarations, declist
%type <obj> program, function, expression, expressions, binopexpr, smallexpr
%type <obj> exprlist, body, if, elif, else, zomexpr
%%
// byacc -Jclass='klasin sem á að koma t.d. parser (sjá nanolexer)' 'nafn.byacc'
start
	: program  {generateProgram(filename, ((Vector<Object>)$1).toArray());}
	;
program //     stack  new vector for funs
	: function {Vector<Object> a = new Vector<Object>(); a.add($1); $$ = a;}
	| program function {((Vector<Object>)($1)).add($2); $$ = $1;}
	;

function
	: NAME '(' parlistm ')' '{' declarations expressions '}' 	{varCount = 0; varTable = new HashMap<String, Integer>(); $$ = new Object[]{$1, $3, $6, ((Vector<Object>)$7).toArray()};}
	;

parlistm
	: parlist 	{$$ = $1;}
	|			{$$ = 0;}
	;

parlist 
	: parlist ',' NAME 		{addVar($3); $$ = $1+1;}
	| NAME 					{addVar($1); $$ = 1;}
	;

declarations
	: declarations VAR parlist ';' 	{$$ = $1+$3;}
	| 								{$$ = 0;}
	;

declist
    : declist ',' NAME      {addVar($3); $$ = $1+1;}
    | NAME                  {addVar($1); $$ = 1;}
    ;

expressions  
	: expressions expression ';'  	{((Vector<Object>)($1)).add($2); $$ = $1;}
	| expression ';'				{Vector<Object> a = new Vector<Object>(); a.add($1); $$ = a;}
	;

expression  
	: NAME '=' expression 		{$$ = new Object[] {"ASSIGN", findVar($1), $3};}
	| RETURN expression 		{$$ = new Object[]{"RETURN", $2}; }
	| binopexpr 				{$$ = $1;}
	;

binopexpr	
	: smallexpr 					{$$ = $1;}
	| binopexpr OPNAME smallexpr 	{$$ = new Object[]{"CALL", $2, new Object[]{$1,$3}};}
	; 

smallexpr  
	: NAME 						{$$ = new Object[]{"NAME", findVar($1)};}
	| NAME '(' exprlist ')' 	{$$ = new Object[]{"CALL", $1, ((Vector<Object>)$3).toArray()};} //Call
	| OPNAME smallexpr 			{$$ = new Object[]{"CALL", $1, $2};} //CALL opname, arg
	| LITERAL 					{$$ = new Object[]{"LITERAL", $1}; }
	| '(' expression ')' 		{$$ = $2;}
	| WHILE expression body 	{$$ = new Object[]{"WHILE", $2, $3};}
	| if elif else 				{$$ = new Object[]{"IF", $1, ((Vector<Object>)$2).toArray(), $3};}
	;

if
	: IF expression body 	{$$ = new Object[]{$2, $3};} //cond, body
	;

elif
	: elif ELSEIF expression body 	{((Vector<Object>)$1).add(new Object[]{$3, $4}); $$ = $1;} //cond, body
	| 								{$$ = new Vector<Object>();}
	;

else
	: ELSE body 	{$$ = $2;}
	| 				{$$ = new Object[]{};}
	;

exprlist
	: expression 				{Vector<Object> a = new Vector<Object>(); a.add($1); $$ = a;}
	| exprlist ',' expression 	{((Vector<Object>)$1).add($3); $$=$1;}
	;

body
	: '{' zomexpr '}' 			{$$ = ((Vector<Object>)$2).toArray();}
	;

zomexpr
	: zomexpr expression ';' 	{((Vector<Object>)$1).add($2); $$ = $1;}
	| 							{$$ = new Vector<Object>();}
	;
%%




/* a reference to the lexer object */
private NanoLexer lexer;
private static int varCount;
private static HashMap<String,Integer> varTable;
private static String filename;

private static void addVar( String name ){
	if( varTable.get(name) != null )
		throw new Error("Variable "+name+" already exists");
	varTable.put(name,varCount++);
}

private static int findVar( String name ){
	Integer res = varTable.get(name);
	if( res == null )
		throw new Error("Variable "+name+" does not exist");
	return res;
}

/* interface to the lexer */
private int yylex () {
    int yyl_return = -1;
    try {
    	yyl_return = lexer.yylex();
    }
    catch (IOException e) {
    	System.err.println("IO error :"+e);
    }
    return yyl_return;
}

/* error reporting */
public void yyerror (String error) {
	//skrifa út línu / column hvar villan varð.
    System.err.println ("Error: " + error);
}

/* lexer is created in the constructor */
public NanoParser(Reader r) {
    lexer = new NanoLexer(r, this);
}

public static void main(String args[]) throws IOException {
    filename = args[0].substring(0, args[0].lastIndexOf('.'));
    NanoParser yyparser = new NanoParser(new FileReader(args[0]));
    varTable = new HashMap<String,Integer>();
    yyparser.yyparse();    
}

public static void emit (String s){
 	System.out.println(s);
}

static void generateProgram(String name, Object[] p){
 	emit("\""+name+".mexe\" = main in");
 	emit("!");
 	emit("{{");
 	for( Object f: p ) generateFunction((Object[]) f);
 	emit("}}");
 	emit("*");
 	emit("BASIS;");
}

static void generateFunction(Object[] fun){
	// fun = {fname, argcount, varcount, expr}
	System.out.println("#\"" + (String)fun[0] + "[f" + (int)fun[1] + "]\" =");
        System.out.println("[");

        if((int)fun[2] > 0) {
            System.out.println("(MakeVal null)");
            for(int i = 0; i < (int)fun[2]; i++) {
                System.out.println("(Push)");
            }
        }

        Object[] ex = (Object[]) fun[3];
        for(int i = 0; i < ex.length; i++) {
            generateExpr((Object[])ex[i]);
        }
        System.out.println("(Return)");
        System.out.println("];");
}

    static int nextLab = 0;

static void generateExpr( Object[] e )
{
    switch((String)e[0]) {
        case "ASSIGN":
            // e = {"ASSIGN", loc, expr}
            generateExpr((Object[])e[2]);
            System.out.println("(Store " + e[1] + ")");
            return;
        case "LITERAL":
            // e = {"LITERAL", lit}
            System.out.println("(MakeVal " + e[1] + ")");
            return;
        case "WHILE":
            // e = {"WHILE", cond, body}
            String startWhile = "_" + nextLab++;
            String endWhile = "_" + nextLab++;
            System.out.println(startWhile + ":");
            generateExpr((Object[])e[1]);
            System.out.println("(GoFalse " + endWhile + ")");
            generateBody((Object[])e[2]);
            System.out.println("(Go " + startWhile + ")");
            System.out.println(endWhile + ":");
            return;
        case "CALL":
            // e = {"CALL", opname, args}
            Object[] args = (Object[])e[2];
            if(args.length > 0) {
                generateExpr((Object[])args[0]);
            }
            for(int i = 1; i < args.length; i++) {
                System.out.println("(Push)");
                generateExpr((Object[])args[i]);
            }
            System.out.println("(Call #\"" + (String)e[1] + "[f" + args.length + "]\" " + args.length + ")");
            return;
        case "NAME":
            // e = {"NAME", loc}
            System.out.println("(Fetch " + (int)e[1] + ")");
            return;
        case "IF":
            // e = {"IF", (cond, body), [body]}
            String nextIf = "_" + nextLab++;
            String endIf = "_" + nextLab++;
            Object[] ifmain = (Object[]) e[1];
            generateExpr((Object[])ifmain[0]);
            System.out.println("(GoFalse " + nextIf + ")");
            generateBody((Object[])ifmain[1]);
            System.out.println("(Go " + endIf + ")");
            System.out.println(nextIf + ":");
            Object[] elifArray = (Object[])e[2];
            // Else if:  Þarf að breyta. Tekur inn Array af obj. Hvert obj inniheldur cond, body.
            //Fyrir: e[2] er fylki af 0 eða fleiri objects.
            for(int i = 0; i < elifArray.length; i++) {
            	//Hérna þarf að taka objectið úr e[i]. Object inniheldur cond, body;
            	Object[] currObj = (Object[])elifArray[i]; //Current object
                nextIf = "_" + nextLab++;
                generateExpr((Object[])currObj[0]);
                System.out.println("(GoFalse " + nextIf + ")");
                generateBody((Object[])currObj[1]);
                System.out.println("(Go " + endIf + ")");
                System.out.println(nextIf + ":");
            }
            // Else
            if(e.length%2 == 0) {
                generateBody((Object[])e[e.length-1]);
            }
            System.out.println(endIf + ":");
            return;
        case "RETURN":
            // e = {"RETURN", expr}
            generateExpr((Object[])e[1]);
            System.out.println("(Return)");
            return;
        default:
            System.out.println("ERROR");
            return;
    }

}


static void generateBody( Object[] bod )
    {
        for(int i = 0; i < bod.length; i++) {
            generateExpr((Object[])bod[i]);
        }
    }